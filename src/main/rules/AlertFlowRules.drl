#created on: Aug 3, 2011
package com.jboss.examples.drools.cep.alerts.rules

#list any import classes here.
import java.util.List;
import java.util.ArrayList;

import com.jboss.examples.drools.cep.alerts.model.Alert;
import com.jboss.examples.drools.cep.alerts.model.AlertingResult;
import com.jboss.examples.drools.cep.alerts.model.AlertingResult.AlertingResultCode;
import com.jboss.examples.drools.cep.alerts.model.Attribute;
import com.jboss.examples.drools.cep.alerts.model.DerivedAlert;
import com.jboss.examples.drools.cep.alerts.model.Equipment;
import com.jboss.examples.drools.cep.alerts.model.Link;
import com.jboss.examples.drools.cep.alerts.model.SystemAlert;
import com.jboss.examples.drools.cep.alerts.model.AlertStatus;

import com.jboss.examples.drools.cep.alerts.services.CAPService;
import com.jboss.examples.drools.cep.alerts.services.DataService;

#declare any global variables here
global com.jboss.examples.drools.cep.alerts.services.CAPService capService;
global com.jboss.examples.drools.cep.alerts.services.DataService dataService;

declare Alert 
   @role(event) 
end

/*
    An Alert is created from a SystemAlert
*/
rule "Create New Alert When SystemAlert Arrives"
    when
        $s : SystemAlert( status == AlertStatus.ACTIVE )
    then
        Alert a = new Alert( $s );
        Link $downStreamLink = dataService.lookupDownstreamLink( $s.getDeviceName() );
        Link $upStreamLink = dataService.lookupUpstreamLink( $s.getDeviceName() );
        a.setUpstreamLink( $upStreamLink );
        a.setDownstreamLink( $downStreamLink );
        System.out.println("xxx new SystemAlert received.  Creating Alert for Alert " + a.getId());
        retract($s);
        insert(a);
end

rule "Multiple Alerts"
    duration( 1m )
    when
        $a : Alert()
        $l : List( ) from accumulate( $b : Alert( deviceName == $a.deviceName, this after[0,1m] $a ), collectList($b) )
    then
        DerivedAlert derivedAlert = new DerivedAlert( );
        derivedAlert.addAlerts( $l );
        for ( Alert alert : new ArrayList<Alert>((List<Alert>)$l) ){
            retract( alert );
        }
        capService.sendMultipleCAPAlert( derivedAlert );
end

rule "Single Alert"
    // salience will prevent the Multiple Alerts rule from firing if no correlating Alerts are created
    salience 10
    when
        $a : Alert()
        not Alert( this != $a, deviceName == $a.deviceName, this after[0,1m] $a )
    then
        capService.sendCAPAlert( $a );
        retract( $a );
end

